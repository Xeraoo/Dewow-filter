# -*- coding: utf-8 -*-
"""filtr_dewow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V8zrbuH3sSnu3EMFh0CNQbV_cxduOAJD
"""

#Zadanie 2
#Napisać i zaimplementować (na wczytanym do Colaba/Pycharma profilu gpr) filtr dewow (z Reflexa znany jako (substract mean-dewow)

#Wykonanie: Tymoteusz Maj

import os
import numpy as np
import matplotlib.pyplot as plt
import math

file = 'Profile8.rd3'

class GPR_Profile():
  def __init__(self, file) -> None:
    self.import_data(file)
    self.twtt = np.linspace(0, float(self.info["TIMEWINDOW"]), int(self.info["SAMPLES"]))
    self.profilePos = float(self.info["DISTANCE INTERVAL"]) * np.arange(0, self.data.shape[1])


  def import_data(self, file):
    file_name, file_ext = os.path.splitext(file)
    self.data, self.info = self.read_mala(file_name)

  def read_mala(self, file_name):
    info = {} 
    with open (file_name+'.rad') as f:
      for line in f:
        parameter  = line.split(":")
        info[parameter[0]] = parameter[1].rstrip()
    datafile_name = file_name+".rd3"
    data = np.fromfile(datafile_name, dtype = np.int16)
    n_row = int(len(data) / int(info['SAMPLES']))
    data = (np.asmatrix(data.reshape(n_row, int(info['SAMPLES'])))).transpose()

    return data, info

  def show_ascan(self):
    trace = int(self.data.shape[1]/2)
    a_scan = np.array(self.data[:, trace])

    print("Show Ascan")

    plt.scatter(a_scan, np.arange(int(self.info["SAMPLES"])), marker  = ".", c = a_scan, cmap = 'magma',
                vmin = min(a_scan), vmax = max(a_scan),
                linewidths=0.1)
    plt.plot(a_scan, np.arange(int(self.info["SAMPLES"])), linewidth=0.5)
    plt.gca().set_ylabel("sample number")
    plt.gca().invert_yaxis()
    plt.colorbar()
    plt.show(block=True)
    
  def show_profile(self):
 
        contrast = 6 
        dx = float(self.info["DISTANCE INTERVAL"])
        dt = self.twtt[6] - self.twtt[5]
        stdcont = np.nanmax(np.abs(self.data)[:])
        max_amp = np.matrix.max(abs(self.data))
        plt.imshow(self.data, cmap='magma', extent=[min(self.profilePos),
                                                    max(self.profilePos),
                                                    max(self.twtt),
                                                    min(self.twtt)],
        aspect = "auto", vmin = -stdcont / contrast, vmax = stdcont / contrast)
        plt.gca().set_ylabel("two-way travel time [ns]")
        yrng = [np.max(self.twtt), np.min(self.twtt)]
        xrng = [min(self.profilePos), max(self.profilePos)]
        plt.ylim(yrng)
        plt.xlim(xrng)
        plt.gca().set_xlabel("profile position [m]")
        plt.gca().xaxis.tick_top()
        plt.gca().xaxis.set_label_position('top')
        plt.colorbar()
        plt.show()

  def dewow_filter(self, window):
    if window % 2 == 1:
        pass

    if window % 2 == 0:
        window += 1 
    r_top = self.data[:math.floor(window/2)][::-1]
    r_bottom = self.data[-math.floor(window/2):][::-1]
    data_padding = np.concatenate((r_top, self.data, r_bottom)) 
    new = np.empty_like(self.data)

    for i in range(len(self.data)):
        start = i - window // 2
        end = i + window // 2
        window_data = data_padding[start:end]
        mean = np.mean(window_data)
        new[i] = self.data[i] - mean
    self.data = new
    print("\n")
    print("Dewow (substract mean-dewow) filter; window = "+ str(window))



profile_1 = GPR_Profile(file)
profile_1.show_ascan()
profile_1.dewow_filter(82)
profile_1.show_profile()